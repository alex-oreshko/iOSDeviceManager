#!/usr/bin/env ruby

require 'date'
require 'json'

BIN='./Distribution/dependencies/bin/iOSDeviceManager'
OUTDIR="results"
TEST_RUNNER="#{ENV['HOME']}/calabash-xcuitest-server/Products/app/DeviceAgent/CBX-Runner.app"
TEST_BUNDLE="#{ENV['HOME']}/calabash-xcuitest-server/Products/app/DeviceAgent/CBX-Runner.app/PlugIns/CBX.xctest"

def sys(cmd)
  puts "$ #{cmd}"
  system(cmd)
end

def launch_sim(sim_id)
  puts "\tLaunch #{sim_id}"
  sys "#{BIN} launch_simulator -d #{sim_id}"
end

def kill_sim(sim_id)
  puts "\tKill #{sim_id}"
  sys "#{BIN} kill_simulator -d #{sim_id}"
end

def install(sim_id)
  puts "\tInstall to #{sim_id}"
  sys "#{BIN} install -d #{sim_id} -a #{ENV['HOME']}/calabash-xcuitest-server/Products/app/UnitTestApp/UnitTestApp.app"
end

def uninstall(sim_id)
  puts "\tUninstall from #{sim_id}"
  sys "#{BIN} uninstall -d #{sim_id} -b com.apple.test.CBX-Runner"
  sys "#{BIN} uninstall -d #{sim_id} -b sh.calaba.UnitTestApp"
end

def start_test(sim_id)
  puts "\tStart test on #{sim_id}"
  r = sys "#{BIN} start_test -d #{sim_id} -r #{TEST_RUNNER} -t #{TEST_BUNDLE} &"
  sleep 10
  r
end

def ui_smoke_test(ip)
  test_pid = $?.pid

  if ip.nil? or ip.empty?
    ip = "http://127.0.0.1:27753"
  end
  puts "IP: #{ip}"
  system "curl -X POST -d '{\"bundleID\" : \"com.apple.Preferences\"}' #{ip}/1.0/session"
  system "curl -X POST -d '{\"type\" : \"cell\"}' #{ip}/1.0/query"
  begin
    ret = JSON.parse `curl -X POST -d '{\"gesture\" : \"touch\"}' #{ip}/1.0/gesture/2`
  rescue
    ret = JSON.parse("{ \"error\" : \"failure\" }")
  end
  ret
end

def code_to_status(code)
  sc = $?.exitstatus
  case (sc)
      when 0
        "ok"
      when 1
        "generic failure"
      when 2
        false
      when 3
        "missing args"
      when 4
        "invalid args"
      when 5
        "internal error"
      when 6
        "unrecognized cmd"
      when 7
        "unrecognized flag"
      when 8
        "device not found"
      else
        raise "#{sc} not valid"
  end
end

sim_ids = `instruments -s devices | egrep '(iPhone)|(iPad)' | grep -v '+ Apple Watch'`.chomp().split("\n")

sims = []

sim_ids.each do |sim_id|
  name = sim_id.split('(')[0].chomp
  id = sim_id.match(/\[(?<id>.+)\]/)["id"]
  os = sim_id.match(/\((?<os>\d+\.\d+)\)/)["os"]
  if os.to_f >= 9 
    sim = { :name => name, :os => os, :id => id, :results => {} }
    sims << sim
    
    results = {}
    results['launch'] = code_to_status (launch_sim id)
    results['install'] = code_to_status (install id)
    results['uninstall'] = code_to_status (uninstall id)    
    results['start_test'] = code_to_status (start_test id)
    results['ui_smoke_test'] = ui_smoke_test ARGV[0]
    results['kill'] = code_to_status (kill_sim id)
    
    sim[:results] = results
  end
end

output = JSON.pretty_generate(sims)
outfile = File.join OUTDIR, "#{DateTime.now.to_s}.sim.json"
File.open(outfile,"w") do |f|
  f.write(output)
end

puts output
puts "Wrote results to #{outfile}" 
